table4 = table4 %>%
mutate(
Year = substr(Quarter, 1, 4),
Quarter2 = substr(Quarter, 6, 11)
)
# create long version of data
table4_long = table4 %>%
gather(key = "Industry", value = "Employment", -c(Quarter, Quarter2, Year))
#Make a table of industry names
industry_names = readxl::read_excel(here::here("data", "6291004.xls"),
sheet = "Data1",
col_names = paste0("C", 1:61),
n_max = 10)
industry_names = industry_names[, seq(1, ncol(industry_names), 3)]
colnames(industry_names) = industry_names[10, ]
industry_names = lapply(industry_names[1, ], function(x) sub("\\s+$", "", stringr::str_extract(x, "[^;]*")))
# Read in industry codes
industry_codes = read.csv(here::here("data", "broad_avg_taxable_income.csv"))
industry_codes = industry_codes[, c("broad_code", "broad_name")]
table4_long$broad_name=unlist(industry_names[table4_long$Industry], use.names = FALSE)
# Add industry codes to long table.
table4_long = table4_long %>%
full_join(industry_codes, by = "broad_name")
## Table for raw employment figures plots per industry
employment_since_2018 = table4_long %>%
filter(Quarter > as.POSIXct("2018-02-01")) %>%
filter(Industry != "A84932399X")
#write.csv(employment_since_2018,
#          file.path(OUTPUT_FILEPATH,"broad_employment_since_2018.csv"))
employment_since_2010 = table4_long %>%
filter(Quarter > as.POSIXct("2010-02-01")) %>%
filter(Industry != "A84932399X") # remove total
#write.csv(employment_since_2010,
#          file.path(OUTPUT_FILEPATH,"broad_employment_since_2010.csv"))
colourCount = length(unique(table4_long$Industry))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
employment_since_2018
employment_since_2018[, Origin := as.Date(Origin, origin = "1970-01-01")]
setDT(employment_since_2018)
employment_since_2018[, Origin := as.Date(Origin, origin = "1970-01-01")]
employment_since_2018
employment_since_2018[, Quarter := as.Date(Quarter, origin = "1970-01-01")]
employment_since_2018
ggplot(employment_since_2018, aes(x = Quarter, y = Employment, color = broad_name)) +
geom_point()+
geom_line() +
labs(y = "Number Employed (1000 people)")+
scale_x_continuous(breaks = unique(employment_since_2018$Quarter))+
theme(axis.text.x = element_text(angle=20)) +
scale_color_manual(values = getPalette(colourCount))
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(RColorBrewer)
OUTPUT_FILEPATH = here::here("output")
# Read data
table4 = readxl::read_excel(here::here("data", "6291004.xls"),
sheet = "Data1",
col_names = TRUE,
skip = 9)
# take every third column because that contains original counts
table4 = table4[, seq(1, ncol(table4), 3)]
names(table4)[names(table4) == "Series ID"] = "Quarter"
# create a Year column
table4 = table4 %>%
mutate(
Year = substr(Quarter, 1, 4),
Quarter2 = substr(Quarter, 6, 11)
)
# create long version of data
table4_long = table4 %>%
gather(key = "Industry", value = "Employment", -c(Quarter, Quarter2, Year))
#Make a table of industry names
industry_names = readxl::read_excel(here::here("data", "6291004.xls"),
sheet = "Data1",
col_names = paste0("C", 1:61),
n_max = 10)
industry_names = industry_names[, seq(1, ncol(industry_names), 3)]
colnames(industry_names) = industry_names[10, ]
industry_names = lapply(industry_names[1, ], function(x) sub("\\s+$", "", stringr::str_extract(x, "[^;]*")))
# Read in industry codes
industry_codes = read.csv(here::here("data", "broad_avg_taxable_income.csv"))
industry_codes = industry_codes[, c("broad_code", "broad_name")]
table4_long$broad_name=unlist(industry_names[table4_long$Industry], use.names = FALSE)
# Add industry codes to long table.
table4_long = table4_long %>%
full_join(industry_codes, by = "broad_name")
## Table for raw employment figures plots per industry
employment_since_2018 = table4_long %>%
filter(Quarter > as.POSIXct("2018-02-01")) %>%
filter(Industry != "A84932399X")
#write.csv(employment_since_2018,
#          file.path(OUTPUT_FILEPATH,"broad_employment_since_2018.csv"))
employment_since_2010 = table4_long %>%
filter(Quarter > as.POSIXct("2010-02-01")) %>%
filter(Industry != "A84932399X") # remove total
#write.csv(employment_since_2010,
#          file.path(OUTPUT_FILEPATH,"broad_employment_since_2010.csv"))
colourCount = length(unique(table4_long$Industry))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
class(employment_since_2018)
setDT(employment_since_2018)
employment_since_2018[, Quarter := as.Date(Quarter, origin = "1970-01-01")]
employment_since_2018 = as_tibble(employment_since_2018)
ggplot(employment_since_2018, aes(x = Quarter, y = Employment, color = broad_name)) +
geom_point()+
geom_line() +
labs(y = "Number Employed (1000 people)")+
scale_x_continuous(breaks = unique(employment_since_2018$Quarter))+
theme(axis.text.x = element_text(angle=20)) +
scale_color_manual(values = getPalette(colourCount))
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(RColorBrewer)
OUTPUT_FILEPATH = here::here("output")
# Read data
table4 = readxl::read_excel(here::here("data", "6291004.xls"),
sheet = "Data1",
col_names = TRUE,
skip = 9)
# take every third column because that contains original counts
table4 = table4[, seq(1, ncol(table4), 3)]
names(table4)[names(table4) == "Series ID"] = "Quarter"
# create a Year column
table4 = table4 %>%
mutate(
Year = substr(Quarter, 1, 4),
Quarter2 = substr(Quarter, 6, 11)
)
# create long version of data
table4_long = table4 %>%
gather(key = "Industry", value = "Employment", -c(Quarter, Quarter2, Year))
#Make a table of industry names
industry_names = readxl::read_excel(here::here("data", "6291004.xls"),
sheet = "Data1",
col_names = paste0("C", 1:61),
n_max = 10)
industry_names = industry_names[, seq(1, ncol(industry_names), 3)]
colnames(industry_names) = industry_names[10, ]
industry_names = lapply(industry_names[1, ], function(x) sub("\\s+$", "", stringr::str_extract(x, "[^;]*")))
# Read in industry codes
industry_codes = read.csv(here::here("data", "broad_avg_taxable_income.csv"))
industry_codes = industry_codes[, c("broad_code", "broad_name")]
table4_long$broad_name=unlist(industry_names[table4_long$Industry], use.names = FALSE)
# Add industry codes to long table.
table4_long = table4_long %>%
full_join(industry_codes, by = "broad_name")
## Table for raw employment figures plots per industry
employment_since_2018 = table4_long %>%
filter(Quarter > as.POSIXct("2018-02-01", origin = "1970-01-01")) %>%
filter(Industry != "A84932399X")
#write.csv(employment_since_2018,
#          file.path(OUTPUT_FILEPATH,"broad_employment_since_2018.csv"))
employment_since_2010 = table4_long %>%
filter(Quarter > as.POSIXct("2010-02-01", origin = "1970-01-01")) %>%
filter(Industry != "A84932399X") # remove total
#write.csv(employment_since_2010,
#          file.path(OUTPUT_FILEPATH,"broad_employment_since_2010.csv"))
colourCount = length(unique(table4_long$Industry))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
# setDT(employment_since_2018)
# employment_since_2018[, Quarter := as.Date(Quarter, origin = "1970-01-01")]
# employment_since_2018 = as_tibble(employment_since_2018)
ggplot(employment_since_2018, aes(x = Quarter, y = Employment, color = broad_name)) +
geom_point()+
geom_line() +
labs(y = "Number Employed (1000 people)")+
scale_x_continuous(breaks = unique(employment_since_2018$Quarter))+
theme(axis.text.x = element_text(angle=20)) +
scale_color_manual(values = getPalette(colourCount))
install.packages(c("backports", "bit", "bit64", "caTools", "cli", "clipr", "curl", "DBI", "digest", "evaluate", "fansi", "forcats", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "knitr", "later", "markdown", "mime", "mongolite", "odbc", "openssl", "pkgconfig", "PKI", "prettyunits", "profvis", "progress", "promises", "ps", "R6", "Rcpp", "RCurl", "rJava", "RJDBC", "RJSONIO", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "sparklyr", "stringi", "sys", "tinytex", "withr", "xfun", "yaml"))
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(RColorBrewer)
OUTPUT_FILEPATH = here::here("output")
# Read data
table4 = readxl::read_excel(here::here("data", "6291004.xls"),
sheet = "Data1",
col_names = TRUE,
skip = 9)
# Read data
table4 = readxl::read_excel(here::here("data", "6291004.xls"),
sheet = "Data1",
col_names = TRUE,
skip = 9)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(RColorBrewer)
OUTPUT_FILEPATH = here::here("output")
# Read data
table4 = readxl::read_excel(here::here("data", "6291004.xls"),
sheet = "Data1",
col_names = TRUE,
skip = 9)
# Read data
table4 = readxl::read_excel("C:\Users\mtwig\OneDrive\Desktop\LEgovhack\data\6291004.xls"),
# Read data
table4 = readxl::read_excel("C:\Users\mtwig\OneDrive\Desktop\LEgovhack\data\6291004.xls",
# Read data
table4 = readxl::read_excel("C:/Users/mtwig/OneDrive/Desktop/LEgovhack/data/6291004.xls",
sheet = "Data1",
col_names = TRUE,
skip = 9)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(RColorBrewer)
OUTPUT_FILEPATH = here::here("output")
# Read data
table4 = readxl::read_excel("C:/Users/mtwig/OneDrive/Desktop/LEgovhack/data/6291004.xls",
sheet = "Data1",
col_names = TRUE,
skip = 9)
# take every third column because that contains original counts
table4 = table4[, seq(1, ncol(table4), 3)]
names(table4)[names(table4) == "Series ID"] = "Quarter"
# create a Year column
table4 = table4 %>%
mutate(
Year = substr(Quarter, 1, 4),
Quarter2 = substr(Quarter, 6, 11)
)
# create long version of data
table4_long = table4 %>%
gather(key = "Industry", value = "Employment", -c(Quarter, Quarter2, Year))
#Make a table of industry names
industry_names = readxl::read_excel(here::here("data", "6291004.xls"),
sheet = "Data1",
col_names = paste0("C", 1:61),
n_max = 10)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(RColorBrewer)
OUTPUT_FILEPATH = here::here("output")
# Read data
table4 = readxl::read_excel("C:/Users/mtwig/OneDrive/Desktop/LEgovhack/data/6291004.xls",
sheet = "Data1",
col_names = TRUE,
skip = 9)
# take every third column because that contains original counts
table4 = table4[, seq(1, ncol(table4), 3)]
names(table4)[names(table4) == "Series ID"] = "Quarter"
# create a Year column
table4 = table4 %>%
mutate(
Year = substr(Quarter, 1, 4),
Quarter2 = substr(Quarter, 6, 11)
)
# create long version of data
table4_long = table4 %>%
gather(key = "Industry", value = "Employment", -c(Quarter, Quarter2, Year))
#Make a table of industry names
industry_names = readxl::read_excel("C:/Users/mtwig/OneDrive/Desktop/LEgovhack/data/6291004.xls",
sheet = "Data1",
col_names = paste0("C", 1:61),
n_max = 10)
industry_names = industry_names[, seq(1, ncol(industry_names), 3)]
colnames(industry_names) = industry_names[10, ]
industry_names = lapply(industry_names[1, ], function(x) sub("\\s+$", "", stringr::str_extract(x, "[^;]*")))
# Read in industry codes
industry_codes = read.csv(here::here("data", "broad_avg_taxable_income.csv"))
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(RColorBrewer)
OUTPUT_FILEPATH = here::here("output")
# Read data
table4 = readxl::read_excel("C:/Users/mtwig/OneDrive/Desktop/LEgovhack/data/6291004.xls",
sheet = "Data1",
col_names = TRUE,
skip = 9)
# take every third column because that contains original counts
table4 = table4[, seq(1, ncol(table4), 3)]
names(table4)[names(table4) == "Series ID"] = "Quarter"
# create a Year column
table4 = table4 %>%
mutate(
Year = substr(Quarter, 1, 4),
Quarter2 = substr(Quarter, 6, 11)
)
# create long version of data
table4_long = table4 %>%
gather(key = "Industry", value = "Employment", -c(Quarter, Quarter2, Year))
#Make a table of industry names
industry_names = readxl::read_excel("C:/Users/mtwig/OneDrive/Desktop/LEgovhack/data/6291004.xls",
sheet = "Data1",
col_names = paste0("C", 1:61),
n_max = 10)
industry_names = industry_names[, seq(1, ncol(industry_names), 3)]
colnames(industry_names) = industry_names[10, ]
industry_names = lapply(industry_names[1, ], function(x) sub("\\s+$", "", stringr::str_extract(x, "[^;]*")))
# Read in industry codes
industry_codes = read.csv("C:/Users/mtwig/OneDrive/Desktop/LEgovhack/data/broad_avg_taxable_income.csv")
industry_codes = industry_codes[, c("broad_code", "broad_name")]
table4_long$broad_name=unlist(industry_names[table4_long$Industry], use.names = FALSE)
# Add industry codes to long table.
table4_long = table4_long %>%
full_join(industry_codes, by = "broad_name")
## Table for raw employment figures plots per industry
employment_since_2018 = table4_long %>%
filter(Quarter > as.POSIXct("2018-02-01", origin = "1970-01-01")) %>%
filter(Industry != "A84932399X")
#write.csv(employment_since_2018,
#          file.path(OUTPUT_FILEPATH,"broad_employment_since_2018.csv"))
employment_since_2010 = table4_long %>%
filter(Quarter > as.POSIXct("2010-02-01", origin = "1970-01-01")) %>%
filter(Industry != "A84932399X") # remove total
#write.csv(employment_since_2010,
#          file.path(OUTPUT_FILEPATH,"broad_employment_since_2010.csv"))
colourCount = length(unique(table4_long$Industry))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
# setDT(employment_since_2018)
# employment_since_2018[, Quarter := as.Date(Quarter, origin = "1970-01-01")]
# employment_since_2018 = as_tibble(employment_since_2018)
ggplot(employment_since_2018, aes(x = Quarter, y = Employment, color = broad_name)) +
geom_point()+
geom_line() +
labs(y = "Number Employed (1000 people)")+
scale_x_continuous(breaks = unique(employment_since_2018$Quarter))+
theme(axis.text.x = element_text(angle=20)) +
scale_color_manual(values = getPalette(colourCount))
setDT(employment_since_2018)
library(data.table)
setDT(employment_since_2018)
employment_since_2018[, Quarter := as.Date(Quarter, origin = "1970-01-01")]
employment_since_2018 = as_tibble(employment_since_2018)
ggplot(employment_since_2018, aes(x = Quarter, y = Employment, color = broad_name)) +
geom_point()+
geom_line() +
labs(y = "Number Employed (1000 people)")+
scale_x_continuous(breaks = unique(employment_since_2018$Quarter))+
theme(axis.text.x = element_text(angle=20)) +
scale_color_manual(values = getPalette(colourCount))
type(employment_since_2018$Quarter)
class(employment_since_2018$Quarter)
setDT(employment_since_2018)
employment_since_2018[, Quarter := as.IDate(Quarter, origin = "1970-01-01")]
ggplot(employment_since_2018, aes(x = Quarter, y = Employment, color = broad_name)) +
geom_point()+
geom_line() +
labs(y = "Number Employed (1000 people)")+
scale_x_continuous(breaks = unique(employment_since_2018$Quarter))+
theme(axis.text.x = element_text(angle=20)) +
scale_color_manual(values = getPalette(colourCount))
table4 %>%
filter(Quarter > as.POSIXct("2018-02-01")) %>%
ggplot(aes(x = Quarter, y = A84090248T)) +
geom_point( color = getPalette(colourCount)[1])+
geom_line( color = getPalette(colourCount)[1]) +
labs(title = industry_names["A84090248T"], y = "Number Employed (1000 people)")+
scale_x_continuous(breaks = unique(table4$Quarter))+
theme(axis.text.x = element_text(angle=20))
setDT(table4)
table4[, Quarter := as.IDate(Quarter, origin = "1970-01-01")]
table4 %>%
filter(Quarter > as.POSIXct("2018-02-01")) %>%
ggplot(aes(x = Quarter, y = A84090248T)) +
geom_point( color = getPalette(colourCount)[1])+
geom_line( color = getPalette(colourCount)[1]) +
labs(title = industry_names["A84090248T"], y = "Number Employed (1000 people)")+
scale_x_continuous(breaks = unique(table4$Quarter))+
theme(axis.text.x = element_text(angle=20))
table4 %>%
filter(Quarter > as.POSIXct("2018-02-01")) %>%
ggplot(aes(x = Quarter, y = A84090249V)) +
geom_point(color=getPalette(colourCount)[4])+
geom_line(color=getPalette(colourCount)[4]) +
labs(title = industry_names["A84090249V"], y = "Number Employed (1000 people)")+
scale_x_continuous(breaks = unique(table4$Quarter))+
theme(axis.text.x = element_text(angle=20))
ggplot(employment_since_2010, aes(x = Quarter2, y = Employment, group = factor(Year))) +
geom_point(color="grey") +
geom_line(color="grey") +
geom_line(data=subset(employment_since_2010, Year == "2020"), colour="red") +
geom_point(data=subset(employment_since_2010, Year == "2020"), colour="red") +
#labs(title = industry_names[Industry]) +
facet_wrap(.~broad_code,
scales = "free_y") +
labs(title = "Employment since 2010",
x = "Quarter", y = "Number Employed (1000 people)")+
theme(axis.text.x = element_text(angle=90))
industry_codes
require(readxl)
library(magrittr)
library(tidyr)
IVI_sai <- read_excel("C:/Users/mtwig/OneDrive/Desktop/LEgovhack/data/IVI_DATA - January 2006 onwards.xlsx",4)
IVI_sai_1 <- pivot_longer(IVI_sai,-c(1:4),names_to = "date")
IVI_sai_1$date %<>% as.numeric %>% as.Date(origin = "1899-12-30")
names(IVI_sai)[-(1:4)] %>% as.numeric %>% as.Date(origin = "1899-12-30")
IVI_4dig <- read_excel("../data/",2)
abs_sheets <- excel_sheets(path = "data/6160055001_do003.xlsx")
abs_sheets <- excel_sheets(path = "../data/6160055001_do003.xlsx")
abs_sheets <- excel_sheets(path = "C:/Users/mtwig/OneDrive/Desktop/LEgovhack/data/6160055001_do003.xlsx")
abs_sheets <- excel_sheets(path = "C:/Users/mtwig/OneDrive/Desktop/LEgovhack/data/6160055001_do003.xlsx")
abs_names <- c("desc",
"jobs_COVID",
"jobs_month",
"jobs_week",
"jobs_week_prev",
"wage_COVID",
"wage_month",
"wage_week",
"wage_week_prev")
abs <- lapply(abs_sheets[-1],read_excel, path = "data/6160055001_do003.xlsx",
range = "A11:I29",
col_names = abs_names)
names(abs) <- abs_sheets[-1]
abs_1 <- lapply(abs,function(x){x[-10,]})
abs_2 <- Map(cbind, abs_1, industry = names(abs_1))
abs_flat <- bind_rows(abs_2)
??bind_rows
abs_1 <- lapply(abs,function(x){x[-10,]})
abs_2 <- Map(cbind, abs_1, industry = names(abs_1))
abs_flat <- bind_rows(abs_2)
abs_flat[,2:9] %<>% sapply(as.numeric)
source('C:/Users/mtwig/OneDrive/Desktop/LEgovhack/code/import data.R')
install.packages(pkg)
source('C:/Users/mtwig/OneDrive/Desktop/LEgovhack/code/import data.R')
"../data"
IVI_4dig <- read_excel("../data",2)
source('C:/Users/mtwig/OneDrive/Desktop/LEgovhack/code/import data.R', echo=TRUE)
abs_flat$desc_level <- case_when(abs_flat$desc == "Australia" ~ "Total",
grepl("males",abs_flat$desc,T) ~ "Gender",
grepl("Aged",abs_flat$desc,T) ~ "Age",
T ~ "State/Territory")
abs_flat1 <- abs_flat[abs_flat$desc_level == "Gender",]
STP1 <- ggplot(abs_flat1,aes(x=industry, y = jobs_COVID)) +
geom_bar(aes(fill = industry),stat="identity") +
facet_grid(desc ~.)
grepocc <- unique(IVI_sai_1[IVI_sai_1$Level == 2,c("ANZSCO_CODE","Title")])
grepocc$gr <- paste0("^",grepocc$ANZSCO_CODE)
IVI_plot <- IVI_sai_1 %>% filter(Level == 3,
date > as.Date("2018-01-01"),
State == "AUST",
grepl("^4",ANZSCO_CODE))
ggplot(IVI_plot,aes(x = date, y = value)) +
geom_line(aes(colour = Title),stat="identity")
knitr::opts_chunk$set(echo = F, warning = F, message = F)
library(tidyverse)
library(lubridate)
library(here)
library(kml)
library(zoo)
library(RColorBrewer)
library(ggplot2)
library(data.table)
library(dplyr)
library(readxl)
library(tidyr)
library(magrittr)
abs_flat$desc_level <- case_when(abs_flat$desc == "Australia" ~ "Total",
grepl("males",abs_flat$desc,T) ~ "Gender",
grepl("Aged",abs_flat$desc,T) ~ "Age",
T ~ "State/Territory")
abs_flat1 <- abs_flat[abs_flat$desc_level == "Gender",]
STP1 <- ggplot(abs_flat1,aes(x=industry, y = jobs_COVID)) +
geom_bar(aes(fill = industry),stat="identity") +
facet_grid(desc ~.)
grepocc <- unique(IVI_sai_1[IVI_sai_1$Level == 2,c("ANZSCO_CODE","Title")])
grepocc$gr <- paste0("^",grepocc$ANZSCO_CODE)
IVI_plot <- IVI_sai_1 %>% filter(Level == 3,
date > as.Date("2018-01-01"),
State == "AUST",
grepl("^4",ANZSCO_CODE))
ggplot(IVI_plot,aes(x = date, y = value)) +
geom_line(aes(colour = Title),stat="identity")
abs_flat$desc_level <- case_when(abs_flat$desc == "Australia" ~ "Total",
grepl("males",abs_flat$desc,T) ~ "Gender",
grepl("Aged",abs_flat$desc,T) ~ "Age",
T ~ "State/Territory")
abs_flat1 <- abs_flat[abs_flat$desc_level == "Gender",]
STP1 <- ggplot(abs_flat1,aes(x=industry, y = jobs_COVID)) +
geom_bar(aes(fill = industry),stat="identity") +
facet_grid(desc ~.)
grepocc <- unique(IVI_sai_1[IVI_sai_1$Level == 2,c("ANZSCO_CODE","Title")])
grepocc$gr <- paste0("^",grepocc$ANZSCO_CODE)
IVI_plot <- IVI_sai_1 %>% filter(Level == 3,
date > as.Date("2018-01-01"),
State == "AUST",
grepl("^4",ANZSCO_CODE))
ggplot(IVI_plot,aes(x = date, y = value)) +
geom_line(aes(colour = Title),stat="identity")
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Job Advertisements by Occupation"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("occ",
"Occ:",
choices = unique(IVI_sai_1$Title[IVI_sai_1$Level ==2]))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("occplot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$occplot <- renderPlot({
gr <- grepocc[grepocc$Title == input$occ,"gr"]
d2 <- IVI_sai_1 %>% filter(Level == 3,
date > as.Date("2018-01-01"),
State == "AUST",
grepl(gr,ANZSCO_CODE))
ggplot(d2,aes(x = date, y = value)) +
geom_line(aes(colour = Title),stat="identity")
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('code/app2.R')
